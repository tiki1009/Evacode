import numpy as np
import matplotlib.pyplot as plt
from math import *

N = 50                            # Number of points in each direction
xStart,xEnd = -2.0,2.0            # x-direction boundaries
yStart,yEnd = -1.0,1.0            # y-direction boundaries
x = np.linspace(xStart,xEnd,N)    # x 1D-array
y = np.linspace(yStart,yEnd,N)    # y 1D-array
X,Y = np.meshgrid(x,y)            # generation of the mesh grid

gamma = 5.0                  # strength of the vortex
xVortex,yVortex = 0.0,0.0    # location of the vortex

# function to compute the velocity components of a vortex
def getVelocityVortex(strength,xv,yv,X,Y):
    u = + strength/(2*pi)*(Y-yv)/((X-xv)**2+(Y-yv)**2)
    v = - strength/(2*pi)*(X-xv)/((X-xv)**2+(Y-yv)**2)
    return u,v
    
# function to compute the stream-function of a vortex
def getStreamFunctionVortex(strength,xv,yv,X,Y):
    psi = -strength/(4*pi)*np.log((X-xv)**2+(Y-yv)**2)
    return psi
    
# function to compute the stream-function of a vortex
def getStreamFunctionVortex(strength,xv,yv,X,Y):
    psi = -strength/(4*pi)*np.log((X-xv)**2+(Y-yv)**2)
    return psi
    
# computing the velocity components on the mesh grid
uVortex,vVortex = getVelocityVortex(gamma,xVortex,yVortex,X,Y)

# computing the stream-function on the mesh grid
psiVortex = getStreamFunctionVortex(gamma,xVortex,yVortex,X,Y)

# plotting
size = 10
plt.figure(figsize=(size,(yEnd-yStart)/(xEnd-xStart)*size))
plt.xlabel('x',fontsize=16)
plt.ylabel('y',fontsize=16)
plt.xlim(xStart,xEnd)
plt.ylim(yStart,yEnd)
plt.streamplot(X,Y,uVortex,vVortex,\
               density=2.0,linewidth=1,arrowsize=1,arrowstyle='->')
plt.scatter(xVortex,yVortex,c='#CD2305',s=80,marker='o')


# Vortex and sink
strengthSink = -5.0         # strength of the sink
xSink,ySink = 0.0,0.0       # location of the sink

# function to compute the velocity components of a sink
def getVelocitySink(strength,xs,ys,X,Y):
    u = strength/(2*pi)*(X-xs)/((X-xs)**2+(Y-ys)**2)
    v = strength/(2*pi)*(Y-ys)/((X-xs)**2+(Y-ys)**2)
    return u,v
    
# function to compute the stream-function of a sink
def getStreamFunctionSink(strength,xs,ys,X,Y):
    psi = strength/(2*pi)*np.arctan2((Y-ys),(X-xs))
    return psi
    
# computing the velocity components on the mesh grid
uSink,vSink = getVelocitySink(strengthSink,xSink,ySink,X,Y)

# computing the stream-function on the mesh grid
psiSink = getStreamFunctionSink(strengthSink,xSink,ySink,X,Y)

# superimposition of the sink and the vortex
u = uVortex + uSink
v = vVortex + vSink
psi = psiVortex + psiSink

# plotting
size = 10
plt.figure(figsize=(size,(yEnd-yStart)/(xEnd-xStart)*size))
plt.xlabel('x',fontsize=16)
plt.ylabel('y',fontsize=16)
plt.xlim(xStart,xEnd)
plt.ylim(yStart,yEnd)
plt.streamplot(X,Y,u,v,\
               density=2.0,linewidth=1,arrowsize=1,arrowstyle='->')
plt.scatter(xVortex,yVortex,c='#CD2305',s=80,marker='o')

# Uniform flow pass a cylinder

Uinf = 1.0        # freestream speed
alpha = 0.0       # angle of attack (in degrees)

uFreestream = Uinf*cos(alpha*pi/180)*np.ones((N,N),dtype=float)
vFreestream = Uinf*sin(alpha*pi/180)*np.ones((N,N),dtype=float)

psiFreestream = Uinf*(cos(alpha*pi/180)*Y-sin(alpha*pi/180)*X)

kappa = 1.0                    # strength of the doublet
xDoublet,yDoublet = 0.0,0.0    # location of the doublet

# function to compute the velocity components of a doublet
def getVelocityDoublet(strength,xd,yd,X,Y):
    u = - strength/(2*pi)*((X-xd)**2-(Y-yd)**2)/((X-xd)**2+(Y-yd)**2)**2
    v = - strength/(2*pi)*2*(X-xd)*(Y-yd)/((X-xd)**2+(Y-yd)**2)**2
    return u,v

# function to compute the stream-function of a doublet
def getStreamFunctionDoublet(strength,xd,yd,X,Y):
    psi = - strength/(2*pi)*(Y-yd)/((X-xd)**2+(Y-yd)**2)
    return psi
    
# computing the velocity components on the mesh grid
uDoublet,vDoublet = getVelocityDoublet(kappa,xDoublet,yDoublet,X,Y)

# computing the stream-function on the mesh grid
psiDoublet = getStreamFunctionDoublet(kappa,xDoublet,yDoublet,X,Y)

# superimposition of the doublet and the vortex on the freestream flow
u = uFreestream + uDoublet +uVortex
v = vFreestream + vDoublet +vVortex
psi = psiFreestream + psiDoublet +psiVortex

# plotting
size = 10
plt.figure(figsize=(size,(yEnd-yStart)/(xEnd-xStart)*size))
plt.xlabel('x',fontsize=16)
plt.ylabel('y',fontsize=16)
plt.xlim(xStart,xEnd)
plt.ylim(yStart,yEnd)
plt.streamplot(X,Y,u,v,\
               density=2.0,linewidth=1,arrowsize=1,arrowstyle='->')
plt.contour(X,Y,psi,levels=[0.0],colors='#CD2305',linewidths=2,linestyles='solid')
plt.scatter(xVortex,yVortex,c='#CD2305',s=80,marker='o')


